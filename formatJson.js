// Convertir JSON a objeto JSON.parse():
// los json no soporta funciones

// const json = `{
//   "name": "Manz",
//   "life": 99
// }`;
// const user = JSON.parse(json);
// console.log(user); // { name: 'Manz', life: 99 }
// console.log(user.name);
// console.log(user.life);

// // Convertir objeto a JSON.parse():
// // los obj si soporta funciones
// const user2 = {
//   name: "Manz",
//   life: 99,
//   talk: function () {
//     return "Hola!";
//   },
// };
// JSON.stringify(user2);
// console.log(user2); // '{"name":"Manz","life":99}'

// // Se puede pasar un segundo par√°metro al m√©todo .stringify() que ser√° un aaray
// const user100 = {
//   name: "Manz",
//   life: 99,
//   power: 10,
// };
// JSON.stringify(user100, ["life"]); // '{"life":99}'
// JSON.stringify(user100, ["name", "power"]); // '{"name":"Manz","power":10}'
// JSON.stringify(user100, []); // '{}'
// JSON.stringify(user100, null); // '{"name":"Manz","life":99,"power":10}'

//  JSON.stringify(obj)	Convierte un objeto  obj a su representaci√≥n JSON y la devuelve.
//  JSON.stringify(obj, props)	Idem al anterior, pero filtra y mantiene solo las propiedades del  props.
//  JSON.stringify(obj, props, spaces)	Idem al anterior, pero indenta el JSON a  spaces espacios.

// /* Por √∫ltimo, tambi√©n podemos a√±adir un tercer par√°metro en el m√©todo .stringify() que indicar√° el n√∫mero de espacios que quieres usar al crear el string del JSON resultante.
//  */
// const user200 = {
//   name: "Manz",
//   life: 99,
// };

// JSON.stringify(user200, null, 2);
// // {
// //   "name": "Manz",
// //   "life": 99
// // }

// JSON.stringify(user200, null, 4);
// // {
// //     "name": "Manz",
// //     "life": 99
// // }

// JSON.stringify(user200, ["name"], 1);
// // {
// //  "name": "Manz"
// // }

// // Desestructuraci√≥n de objetos. Spread y rest
// const user300 = {
//   name300: "Manz",
//   role300: "streamer",
//   life300: 99,
// };
// // const { name300, role300, life300} = user300;
// // imprimir uno por uno
// console.log({ name300, role300 });
// console.log({ life300 });
// // imprimir todo
// console.log({ ...user300 });
// // renombrar propiedades si lo deseamos
// const { name300, role300: role400, life300 } = user300;
// console.log({ name300, role400, life300 });
// // valor por defecto propiedades
// const { name, role = "normal user", life = 100 } = user;

// // recrear nuevos objetos apartir de otros, a√±adiendo nuevas props o sobreescribiendo antiguas props
// const user50 = {
//   name: "Manz",
//   role: "streamer",
//   life: 99,
// };
// const fullUser = {
//   ...user50,
//   power: 25, //a√±ade nueva props power
//   life: 50, //sobreescribe life con valor 50
// };

// // ahora con datos no primitivos array, funciones, etc
// const user51 = {
//   name: "Manz",
//   role: "streamer",
//   life: 99,
//   features: ["learn", "code", "paint"],
// };
// // los tipos de datos complejos no son copias, si no referencias
// // en este caso crea una ref en el array de features
// const fullUser10 = {
//   ...user51,
//   power: 25,
//   life: 50,
// };
// console.log(user51.features); // ["learn", "code", "paint"]
// console.log(fullUser10.features); // ["learn", "code", "paint"]

// fullUser.features[0] = "program";
// console.log(fullUser10.features); // ["program", "code", "paint"]
// console.log(user51.features); // ["program", "code", "paint"]

// // para no afectar directamente le objeto de uno con otro
// const user20 = {
//   name: "Manz",
//   role: "streamer",
//   life: 99,
//   features: ["learn", "code", "paint"],
// };

// // ...structuredClone(objeto) devuelve un nuevo objeto, y no la referencia.
// const fullUser20 = {
//   ...structuredClone(user),
//   power: 25,
//   life: 50,
// };
// console.log(user20.features); // ["learn", "code", "paint"]
// console.log(fullUser20.features); // ["learn", "code", "paint"]

// fullUser20.features[0] = "program";

// console.log(fullUser20.features); // ["program", "code", "paint"]
// console.log(user20.features); // ["learn", "code", "paint"]

// ejemplo 2 substraer complejos
// const user30 = {
//   name: "Bryan",
//   age: "24",
//   role: "streamer",
//   attibutes: {
//     height: "1.80",
//     favColor: "blue",
//     hairColor: "brown",
//   },
// };
// // Extraemos propiedad attributes (objeto con 3 propiedades)
// const { attibutes} = user30;
// console.log(attibutes);
// // Extraemos propiedad height (number)
// const { attibutes: {height} } = user30;
// console.log(height);
// // Extraemos propiedad height (number) y la cambiamos por nombre size
// const { attibutes: {height: size} } = user30;
// console.log(size);

// Desestructuraci√≥n (rest)
// const user = {
//   name: "Manz",
//   role: "streamer",
//   life: 99
// }
// const { name, ...rest } = user;
// la propiedad name la desestructuramos como variable y en el caso de rest la desestructuramos como un objeto que contiene las propiedades role y life.
// console.log(name); // "Manz"
// console.log(rest); // { role: "Admin", life: 99 }

// Par√°metros desestructurados
// const user = {
//   name: "Manz",
//   role: "streamer",
//   life: 99,
// };

// function show({ name, role, life }) {
//   const stars = "‚≠ê".repeat(life / 20);
//   return `Nombre: ${name} (${role}) ${stars}`;
// }

// show(user); // "Nombre: Manz (streamer) ‚≠ê‚≠ê‚≠ê‚≠ê"

// Clonar objetos o elementos
// ü•Ç Copia por valor (Duplica el contenido)
// üîÆ Copia por referencia (Hace referencia a d√≥nde est√° el contenido)

// Copia por valor se reliza con tipo de datos number, string, boolean, es decir, con datos primitivos y no comlejos

// Copia por referencia se reliza con tipo de datos m√°s complejos array, object, etc
//  Clonaci√≥n superficial (Shallow clone): Se llama as√≠ cuando realizamos una clonaci√≥n de una estructura de datos y s√≥lo se copia su primer nivel, mientras que segundo y niveles m√°s profundos, se crean referencias.

// üß® Clonaci√≥n profunda (Deep clone): Se llama as√≠ cuando realizamos una clonaci√≥n de una estructura de datos a todos sus niveles.

// Observa esta estructura de datos:
const data = {
  name: "ManzDev", // Se clona en superficial y en profundidad
  tired: false, // Se clona en superficial y en profundidad
  likes: ["css", "javascript", "html", "vue"], // S√≥lo en profundidad
  numbers: [4, 8, 15, 16, 23, 42], // S√≥lo en profundidad
};
// Si realizamos una clonaci√≥n superficial, solo clonar√≠amos los tipos de datos b√°sicos (los dos primeros). Los dos √∫ltimos, al ser estructuras complejas en s√≠ mismas, no se realizar√≠a una clonaci√≥n, sino que ser√≠a una referencia al elemento original, modificando ambos si alteramos uno de sus elementos, como vimos anteriormente.

// Si realizamos una clonaci√≥n profunda, no tendr√≠amos este problema, se clonar√≠an todos los elementos, independientemente del nivel de profundidad.

/* 
Como conclusi√≥n:

Usa ... (spread) o Object.assign() si trabajas con datos primitivos y un s√≥lo nivel de profundidad.
Usa JSON.parse() y JSON.stringify() en el mismo caso. √ötil si necesitas navegadores muy antiguos.
Usa structuredClone() si quieres un clonado moderno, que soporte diferentes niveles de profundidad.
Usa cloneDeep() de Lodash si requieres clonado de funciones y no te supone un coste incluir dependencias externas.
*/

/* 
Tipo de dato	...spread / Object.assign()	JSON.parse()	_.cloneDeep()	structuredClone()
Tipos b√°sicos (primitivos)
‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠
‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠
‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠
undefined	‚úÖ S√≠	‚ö†Ô∏è null	‚úÖ S√≠	‚úÖ S√≠
null	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠
Tipos complejos (no primitivos)
‚ùå No, referencia	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠
‚ùå No, referencia	‚úÖ S√≠	‚úÖ S√≠	‚úÖ S√≠
‚ùå No, referencia	‚ö†Ô∏è string	‚úÖ S√≠	‚úÖ S√≠
‚ùå No, referencia	‚ùå Devuelve TypeError	‚úÖ S√≠	‚úÖ S√≠
‚ùå No, referencia	‚ö†Ô∏è {} vac√≠o	‚úÖ S√≠	‚úÖ S√≠
 / 	‚ùå No, referencia	‚ö†Ô∏è {} vac√≠o	‚úÖ S√≠	‚úÖ S√≠
‚ùå No, referencia	‚úÖ S√≠	‚úÖ S√≠	‚ùå Devuelve DOMException
 / 	‚ùå No, referencia	‚ö†Ô∏è null	‚úÖ S√≠	‚ùå Devuelve DOMException
Elemento del DOM	‚ùå No, referencia	‚ö†Ô∏è {} vac√≠o	‚ùå No, referencia	‚ùå Devuelve DOMException */
