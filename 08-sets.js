// ¬øQu√© es un Set? // Un Set es una colecci√≥n de elementos unicos. no se pueden repetir.
/* 
Propiedad o M√©todo	    Descripci√≥n
NUMBER.size	Propiedad que devuelve el n√∫mero de elementos que tiene el conjunto.
SET.add(element)	A√±ade un elemento al conjunto (si no est√° repetido) y devuelve el set. Muta
BOOLEAN.has(element)	Comprueba si element ya existe en el conjunto. Devuelve si existe.
BOOLEAN.delete(element)	Elimina el element del conjunto. Devuelve si lo elimin√≥ correctamente.
.clear()	Vac√≠a el conjunto completo.
*/

// const set1 = new Set(); // Set({})               (Conjunto vac√≠o)
// const set2 = new Set([5, 6, 7, 8, 9]); // Set({5, 6, 7, 8, 9})  (Conjunto con 5 elementos)
// const set3 = new Set([5, 5, 7, 8, 9]); // Set({5, 7, 8, 9})     (Conjunto con 4 elementos)
// console.log(set1.constructor.name); // "Set"

// add: a√±adir elementos
// has: comprobar si un elemento existe
// delete: eliminar un elemento
// clear: vaciar el conjunto
// const unicos = new Set();
// unicos.add(2);
// unicos.add(4);
// unicos.add(6);

// unicos.has(2); // true
// unicos.has(3); // false

// unicos.delete(2)
// console.log(unicos);

// --> Convertir Set a Arrays
// const convertir = new Set([5, "A", [99, 10, 24]]);
// console.log("SET ORIGINIAL: ", convertir); // Set(3) { 5, 'A', [ 99, 10, 24 ] }
// const conversion = Array.from(convertir); // Lo mismo con -> [...convertir]
// console.log("SET CONVERTIDO EN ARRAY",conversion); // [ 5, 'A', [ 99, 10, 24 ] ]

// Convertir a Arrays a Set
// const array1 = [5, "A", [99, 10, 24]];
// console.log(array1); // [ 5, 'A', [ 99, 10, 24 ] ]
// const convert = new Set(array1);
// console.log(convert); // Set(3) { 5, 'A', [ 99, 10, 24 ] }

// üëâ ¬øQu√© son los WeakSet? - A grandes rasgos, los WeakSet son otro tipo de estructura de conjuntos, muy similar a Set (tambi√©n impide introducir elementos duplicados), sin embargo, tiene algunos matices y diferencias. Veamos esas diferencias.
// üëâ Los WeakSet no permiten insertar datos primitivos

// üëâ Diferencias con los Set - Los Set son una estructura de datos poco restrictiva, ya que puedes insertar cualquier tipo de elemento. Los WeakSet no permiten insertar datos primitivos:
// // *** Set
// const set = new Set([1, "A", true]);                 // OK
// const set2 = new Set([{ name: "Manz" }, [2, 30]]);    // OK

// // *** WeakSet
// // const set3 = new WeakSet([1, "A", true]); // ERROR: Uncaught TypeError: Invalid value used in weak set
// const set4 = new WeakSet([{ name: "Manz" }, [2, 30]]); // OK
// console.log(set4);

// Por otro lado, los WeakSet utilizan referencias d√©biles a un objeto, es decir, si ese objeto no se utiliza (no est√° referenciado) en ninguna otra parte del c√≥digo, se eliminar√° del WeakSet en cuanto el Garbage Collector (Recolector de basura) lo decida para liberar memoria:
// let element = { name: "Manz" };

// const set = new WeakSet([element]); // WeakSet({ { name: "Manz" } })
// element = null; // WeakSet({})

// Tabla de resumen de diferencias
// A continuaci√≥n, una tabla resumen de las diferencias entre Set y WeakSet:

// Caracter√≠stica	Set	WeakSet
// Se pueden insertar elementos repetidos	‚ùå	‚ùå
// Se pueden insertar elementos primitivos	‚úÖ	‚ùå
// Si no se usa el elemento, se elimina del set	‚ùå	‚úÖ
// Se puede convertir a array (es iterable)	‚úÖ	‚ùå
// Propiedad .size	‚úÖ	‚ùå
// M√©todo .add()	‚úÖ	‚úÖ
// M√©todo .has()	‚úÖ	‚úÖ
// M√©todo .delete()	‚úÖ	‚úÖ
// M√©todo .clear()	‚úÖ	‚ùå

// üëâ Operaciones de conjuntos -> Union - Intersecci√≥n - Diferencia - Exclusi√≥n
// Uni√≥n: Es la suma de todos los elementos del conjunto A y el conjunto B.
// Intersecci√≥n: Es la parte com√∫n de los elementos del conjunto A y el conjunto B.
// Diferencia: Son los elementos del conjunto A quit√°ndole los comunes del conjunto B.
// Exclusi√≥n: Son los elementos del conjunto A y el conjunto B que no est√°n en ambos.

// Con datos primitivos
// Uni√≥n de conjuntos
// const conjuntoA = new Set([1, 2, 3]);
// const conjuntoB = new Set([3, 4, 5]);
// const setFull = conjuntoA.union(conjuntoB);
// console.log(setFull); // Set(4) { 1, 2, 3, 4, 5 }

// Intersecci√≥n de conjuntos
// const firstSet = new Set([1, 2, 3, 4]);
// const secondSet = new Set([3, 4, 5]);
// const intersection = firstSet.intersection(secondSet);
// console.log(intersection); // Set(2) { 3, 4 }

// Diferencia de conjuntos
// const firstSet = new Set([1, 2, 3, 4]);
// const secondSet = new Set([3, 4, 5]);
// const difference = firstSet.difference(secondSet);
// console.log(difference); // { 1, 2 }

// Exclusi√≥n de conjuntos
// const firstSet = new Set([1, 2, 3, 4, 5]);
// const secondSet = new Set([3, 4, 5, 6]);
// const exclusion = firstSet.symmetricDifference(secondSet);
// console.log(exclusion); // { 1, 2, 6 }


// Con datos complejos
const firstSet = new Set([
  { name: "Javascript" },
  { name: "CSS" },
  { name: "HTML" },
  { name: "SVG" },
  { name: "JSON" }
]);

const secondSet = new Set([
  { name: "Javascript", type: "Node" },
  { name: "PHP" },
  { name: "Go" },
  { name: "Javascript", type: "Deno" },
  { name: "JSON" }
]);
// Posibles soluciones