/* 
Los headers son fundamentales cuando trabajas con APIs:
Autenticaci√≥n (Authorization)
Especificar tipo de contenido (Content-Type)
Aceptar tipos de respuesta (Accept)
Enviar claves, tokens o control de CORS
*/

// const response = await fetch("https://api.example.com", {
//   method: "GET", // o "POST", "PUT", "DELETE", "etc".
//   headers: {
//     "Content-Type": "aplicacion/json",
//     "Authorization": "applicacion/json",
//     "Authorization": "Bearer TU_TOKEN_AQUI",
//   }
// })

/* üìå Headers comunes y su funci√≥n:
Encabezado	      Descripci√≥n
Content-Type	    Indica el tipo de datos que est√°s enviando. Por ejemplo: "application/json"
Accept	          Indica el tipo de datos que esperas recibir del servidor
Authorization	    Env√≠o de token o credenciales. Por ejemplo: "Bearer abc123"
X-API-Key	        Algunas APIs usan una clave personalizada en vez de Authorization
Access-Control-*	Se usa m√°s en el servidor para habilitar CORS
*/


// üì¶ Estructura b√°sica de fetch con headers
fetch(URL, {
  method: "GET | POST | PUT | DELETE",
  headers: {
    "Content-Type": "application/json",         // qu√© est√°s enviando
    "Accept": "application/json",               // qu√© esperas recibir
    "Authorization": "Bearer TU_TOKEN_AQUI",    // para autenticaci√≥n
  },
  body: JSON.stringify((data)) //solo en POS/PUT
})

/* 
üß™ Headers comunes y para qu√© sirven
Header	                      Valor t√≠pico	          ¬øCu√°ndo usarlo?
Content-Type	                application/json	      En POST/PUT: Cuando env√≠as datos en formato JSON
Accept	                      application/json	      Cuando esperas recibir JSON (o XML, HTML, etc.)
Authorization	                Bearer <token>	        Cuando la API requiere token de acceso
X-API-Key	                    <clave>	                Algunas APIs piden esta cabecera personalizada
Cache-Control	                no-cache	              Para evitar respuestas en cach√©
Access-Control-Allow-Origin	* o tu dominio	          Solo en respuestas del servidor (CORS)
*/


// M√©todos HTTP y c√≥mo se relacionan con los headers
/* 
| M√©todo | ¬øEnv√≠o datos? | ¬øUso `Content-Type`? | ¬øUso `body`? |
| ------ | ------------- | -------------------- | ------------ |
| GET    | ‚ùå No          | Opcional            | ‚ùå No         |
| POST   | ‚úÖ S√≠          | ‚úÖ S√≠               | ‚úÖ S√≠         |
| PUT    | ‚úÖ S√≠          | ‚úÖ S√≠               | ‚úÖ S√≠         |
| DELETE | A veces       | Opcional              | Opcional     |

*/

// üìãEjemplo completo (POST con headers y datos)
// async function enviarDatos() {
//   const URL = "https://api.example.com";
//   const data = { 
//     username: "Bryan", age: 24 
//   };

//   const response = await fetch(URL, {
//     method: "POST",
//     headers: {
//       "Content-Type": "application/json",
//       "Authorization": "Bearer TU_TOKEN_AQUI",
//       "Accept": "application/json",
//     },
//     body: JSON.stringify(data)
//   })

//   const result = await response.json();
//   console.log(result);
// }

// üß± Errores comunes con headers
/* 
| Error com√∫n                     | Causa                                                                | Soluci√≥n                                      |
| ------------------------------- | -------------------------------------------------------------------- | --------------------------------------------- |
| `401 Unauthorized`              | Token inv√°lido o falta `Authorization`                               | Revisa el token o agr√©galo                    |
| `415 Unsupported Media Type`    | No pusiste `Content-Type` o es incorrecto                            | Usa `"application/json"` si env√≠as JSON       |
| `CORS error`                    | La API no permite tu origen                                          | El servidor debe permitir tu dominio con CORS |
| `SyntaxError: Unexpected token` | Est√°s intentando hacer `.json()` sobre una respuesta vac√≠a o no JSON | Verifica `response.ok` antes de leer el body  |
*/